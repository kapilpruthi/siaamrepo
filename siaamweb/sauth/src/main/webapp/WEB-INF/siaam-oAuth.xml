<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:sec="http://www.springframework.org/schema/security" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 
	http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	<http create-session="stateless" use-expressions="true" pattern="/oauth/token"
		authentication-manager-ref="clientAuthenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<anonymous enabled="false" />
		<intercept-url pattern="/oauth/token" access="hasRole('ROLE_CLIENT')" />
		<custom-filter ref="clientCredentialsTokenEndpointFilter"
			before="BASIC_AUTH_FILTER" />
		<http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
		<expression-handler ref="oauthWebExpressionHandler" />
	</http>

	<beans:bean id="clientAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<beans:property name="typeName" value="Basic" />
		<beans:property name="realmName" value="Siaam Secure App" />
	</beans:bean>

	<beans:bean id="oauthAccessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<beans:bean id="clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<beans:property name="authenticationManager" ref="clientAuthenticationManager" />
	</beans:bean>

	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased"
		xmlns="http://www.springframework.org/schema/beans">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<bean class="org.springframework.security.access.vote.RoleVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>
		</constructor-arg>
	</bean>

	<authentication-manager id="clientAuthenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		<authentication-provider user-service-ref="clientDetailsUserService" />
	</authentication-manager>

	<beans:bean id="clientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<beans:constructor-arg ref="clientDetails" />
	</beans:bean>

	<beans:bean id="tokenStore"
		class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore">
		<beans:constructor-arg index="0">
			<beans:ref bean="dataSource" />
		</beans:constructor-arg>
	</beans:bean>

	<beans:bean id="tokenServices"
		class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<beans:property name="tokenStore" ref="tokenStore" />
		<beans:property name="tokenEnhancer" ref="tokenEnhancer" />
		<beans:property name="supportRefreshToken" value="true" />
		<beans:property name="clientDetailsService" ref="clientDetails" />
	</beans:bean>

	<beans:bean id="tokenEnhancer" class="com.siaam.auth.oauth.SiaamTokenEnhancer" />

	<beans:bean id="requestFactory"
		class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
		<beans:constructor-arg name="clientDetailsService"
			ref="clientDetails" />
	</beans:bean>

	<beans:bean id="userApprovalHandler"
		class="com.siaam.auth.oauth.SiaamUserApprovalHandler">
		<beans:property name="approvalStore" ref="approvalStore" />
		<beans:property name="clientDetailsService" ref="clientDetails" />
		<beans:property name="requestFactory" ref="requestFactory" />
	</beans:bean>

	<beans:bean id="approvalStore"
		class="org.springframework.security.oauth2.provider.approval.TokenApprovalStore">
		<beans:property name="tokenStore" ref="tokenStore" />
	</beans:bean>

	<oauth:authorization-server
		client-details-service-ref="clientDetails" token-services-ref="tokenServices"
		user-approval-handler-ref="userApprovalHandler">
		<oauth:authorization-code />
		<oauth:implicit />
		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password />
	</oauth:authorization-server>

	<!-- The OAuth2 protected resources are separated out into their own block 
		so we can deal with authorization and error handling separately. This isn't 
		mandatory, but it makes it easier to control the behavior. -->
	<http pattern="/protected/*" entry-point-ref="oauthAuthenticationEntryPoint"
		access-decision-manager-ref="accessDecisionManager"
		xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/" access="ROLE_ANONYMOUS" />
		<intercept-url pattern="/**" access="ROLE_USER,SCOPE_READ" />
		<custom-filter ref="resourceServerFilter" before="EXCEPTION_TRANSLATION_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>
	
	<oauth:resource-server id="resourceServerFilter"
		resource-id="siaam" token-services-ref="tokenServices" />
		
	<beans:bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
    	<beans:property name="realmName" value="Siaam Secure App" />
	</beans:bean>

	<beans:bean
		class="org.springframework.security.oauth2.provider.client.JdbcClientDetailsService"
		id="clientDetails">
		<beans:constructor-arg index="0">
			<beans:ref bean="dataSource" />
		</beans:constructor-arg>
	</beans:bean>

	<oauth:expression-handler id="oauthExpressionHandler" />
	<oauth:web-expression-handler id="oauthWebExpressionHandler" />
</beans:beans>